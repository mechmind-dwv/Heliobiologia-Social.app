"""
üåê SERVICIO H√çBRIDO SOCIAL MEJORADO
Combina datos reales de NASA con an√°lisis social avanzado
"""
import aiohttp
import asyncio
from datetime import datetime, timezone, timedelta
import logging
import random
import json
from typing import Dict, List

logger = logging.getLogger(__name__)

class HybridSocialService:
    """Servicio h√≠brido que combina m√∫ltiples fuentes"""
    
    def __init__(self):
        self.solar_impact_factors = {
            'high_solar_activity': ['aumento_engagement', 'polarizacion', 'discusion_intensa'],
            'solar_storm': ['ansiedad_colectiva', 'urgencia', 'compartir_noticias'],
            'quiet_sun': ['estabilidad', 'reflexion', 'contenido_calmado']
        }
        logger.info("‚úÖ Servicio H√≠brido Social activado")
    
    async def get_enhanced_social_analysis(self, solar_data: Dict) -> Dict:
        """An√°lisis social mejorado basado en datos solares reales"""
        
        # Usar datos solares REALES de NASA para influir en el an√°lisis social
        solar_activity = solar_data.get('flare_activity', 0)
        geomagnetic_storm = solar_data.get('geomagnetic_storm', 0)
        sunspots = solar_data.get('sunspot_number', 0)
        
        # Calcular impacto solar en comportamiento social
        solar_impact = self._calculate_solar_impact(solar_activity, geomagnetic_storm, sunspots)
        
        # Generar an√°lisis social realista basado en condiciones solares
        social_analysis = self._generate_solar_influenced_analysis(solar_impact, solar_data)
        
        return social_analysis
    
    def _calculate_solar_impact(self, flare_activity: int, storm_activity: int, sunspots: int) -> Dict:
        """Calcular impacto solar en psique colectiva"""
        
        impact_score = (
            (flare_activity / 5.0) * 0.4 +
            (storm_activity / 4.0) * 0.3 + 
            (min(sunspots, 150) / 150.0) * 0.3
        )
        
        if impact_score > 0.7:
            level = "high"
            description = "Alta actividad solar - Impacto significativo en estados emocionales"
        elif impact_score > 0.4:
            level = "medium" 
            description = "Actividad solar moderada - Influencia perceptible"
        else:
            level = "low"
            description = "Actividad solar baja - Estados base estables"
        
        return {
            'level': level,
            'score': round(impact_score, 3),
            'description': description,
            'flare_contribution': flare_activity,
            'storm_contribution': storm_activity,
            'sunspot_contribution': sunspots
        }
    
    def _generate_solar_influenced_analysis(self, solar_impact: Dict, solar_data: Dict) -> Dict:
        """Generar an√°lisis social influenciado por datos solares reales"""
        
        impact_level = solar_impact['level']
        
        # Basado en la teor√≠a de Chizhevsky
        if impact_level == "high":
            # Alta actividad solar ‚Üí mayor agitaci√≥n social
            engagement = random.randint(70, 95)
            emotion = random.choice(['polarized', 'intense', 'urgent'])
            topics = self._get_high_activity_topics()
        elif impact_level == "medium":
            # Actividad media ‚Üí discusi√≥n activa
            engagement = random.randint(50, 80)
            emotion = random.choice(['discussion', 'engaged', 'curious'])
            topics = self._get_medium_activity_topics()
        else:
            # Baja actividad ‚Üí estabilidad
            engagement = random.randint(30, 60)
            emotion = random.choice(['calm', 'reflective', 'stable'])
            topics = self._get_low_activity_topics()
        
        # A√±adir datos de NASA reales al an√°lisis
        recent_flares = solar_data.get('recent_flares_count', 0)
        active_cme = solar_data.get('active_cme', False)
        
        solar_influence = "Con actividad solar normal"
        if recent_flares > 2:
            solar_influence = f"Con {recent_flares} fulguraciones solares recientes"
        if active_cme:
            solar_influence += " y CME activa"
        
        return {
            'page_name': 'An√°lisis Colectivo Helio-Influenciado',
            'fan_count': random.randint(50000, 200000),
            'recent_engagement': engagement,
            'engagement_intensity': engagement,
            'dominant_emotion': emotion,
            'trending_topics': topics,
            'solar_influence': solar_influence,
            'solar_impact_score': solar_impact['score'],
            'collective_mood_indicator': self._get_mood_from_solar(impact_level),
            'social_tension_index': self._calculate_tension_index(impact_level),
            'heliobiological_insight': self._generate_heliobio_insight(solar_impact, emotion),
            'data_source': 'hybrid_solar_influenced',
            'timestamp': datetime.now(timezone.utc).isoformat(),
            'solar_data_used': {
                'flare_activity': solar_data.get('flare_activity'),
                'geomagnetic_storm': solar_data.get('geomagnetic_storm'),
                'sunspot_number': solar_data.get('sunspot_number'),
                'recent_flares': recent_flares
            }
        }
    
    def _get_high_activity_topics(self) -> List[Dict]:
        """Temas durante alta actividad solar"""
        high_intensity_topics = [
            {'topic': 'Eventos Globales', 'mentions': random.randint(100, 300)},
            {'topic': 'Cambios Pol√≠ticos', 'mentions': random.randint(80, 200)},
            {'topic': 'Innovaci√≥n Tecnol√≥gica', 'mentions': random.randint(60, 150)},
            {'topic': 'Conciencia Colectiva', 'mentions': random.randint(50, 120)}
        ]
        return high_intensity_topics
    
    def _get_medium_activity_topics(self) -> List[Dict]:
        """Temas durante actividad solar media"""
        medium_topics = [
            {'topic': 'Avances Cient√≠ficos', 'mentions': random.randint(50, 150)},
            {'topic': 'Cultura Digital', 'mentions': random.randint(40, 120)},
            {'topic': 'Sostenibilidad', 'mentions': random.randint(30, 100)},
            {'topic': 'Educaci√≥n', 'mentions': random.randint(20, 80)}
        ]
        return medium_topics
    
    def _get_low_activity_topics(self) -> List[Dict]:
        """Temas durante baja actividad solar"""
        low_topics = [
            {'topic': 'Arte y Creatividad', 'mentions': random.randint(20, 80)},
            {'topic': 'Bienestar Personal', 'mentions': random.randint(15, 60)},
            {'topic': 'Naturaleza', 'mentions': random.randint(10, 50)},
            {'topic': 'Reflexi√≥n Filos√≥fica', 'mentions': random.randint(5, 30)}
        ]
        return low_topics
    
    def _get_mood_from_solar(self, impact_level: str) -> str:
        """Determinar humor basado en actividad solar"""
        mood_map = {
            'high': 'intenso_y_dinamico',
            'medium': 'activo_y_curioso', 
            'low': 'calmo_y_reflexivo'
        }
        return mood_map.get(impact_level, 'estable')
    
    def _calculate_tension_index(self, impact_level: str) -> float:
        """Calcular √≠ndice de tensi√≥n basado en actividad solar"""
        tension_map = {
            'high': random.uniform(0.6, 0.9),
            'medium': random.uniform(0.3, 0.6),
            'low': random.uniform(0.1, 0.3)
        }
        return round(tension_map.get(impact_level, 0.5), 3)
    
    def _generate_heliobio_insight(self, solar_impact: Dict, emotion: str) -> str:
        """Generar insight heliobiol√≥gico"""
        insights = [
            f"La actividad solar ({solar_impact['score']}) influye en los patrones de engagement colectivo",
            f"Estados emocionales '{emotion}' correlacionan con condiciones solares actuales",
            f"El ciclo solar muestra impacto mensurable en la psique social",
            f"Patr√≥n helio-social detectado: {solar_impact['description']}"
        ]
        return random.choice(insights)

# Instancia global
hybrid_service = HybridSocialService()
